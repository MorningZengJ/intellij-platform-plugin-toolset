package com.github.morningzeng.toolset.ui;

import com.fasterxml.jackson.core.type.TypeReference;
import com.github.morningzeng.toolset.Constants.IconC;
import com.github.morningzeng.toolset.component.LanguageTextArea;
import com.github.morningzeng.toolset.config.LocalConfigFactory;
import com.github.morningzeng.toolset.dialog.SymmetricPropDialog;
import com.github.morningzeng.toolset.model.SymmetricCryptoProp;
import com.github.morningzeng.toolset.utils.GridLayoutUtils;
import com.github.morningzeng.toolset.utils.ScratchFileUtils;
import com.github.morningzeng.toolset.utils.StringUtils;
import com.github.morningzeng.toolset.utils.SymmetricCrypto;
import com.intellij.icons.AllIcons.General;
import com.intellij.icons.AllIcons.Nodes;
import com.intellij.openapi.fileTypes.PlainTextLanguage;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.ComboBox;
import com.intellij.openapi.ui.Messages;
import com.intellij.ui.components.JBLabel;
import com.intellij.ui.components.JBPanel;
import com.intellij.ui.components.JBPanelWithEmptyText;
import com.intellij.ui.components.JBTextArea;
import com.intellij.util.ui.GridBag;

import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.SwingConstants;
import java.awt.GridBagLayout;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * @author Morning Zeng
 * @since 2024-05-11
 */
public final class AESComponent extends JBPanel<JBPanelWithEmptyText> {

    private final static String TYPE = "AES";
    final SymmetricCrypto[] cryptos = Arrays.stream(SymmetricCrypto.values())
            .filter(crypto -> TYPE.equals(crypto.getType()))
            .toArray(SymmetricCrypto[]::new);
    final Project project;
    /**
     * Represents a combo box used for selecting a SymmetricCryptoProp.
     *
     * <p>
     * The cryptoPropComboBox is an instance of the ComboBox class, which allows the user to select a SymmetricCryptoProp from a list of available options.
     * It is used in the AESComponent class to provide a selection for cryptography algorithm options.
     * </p>
     *
     * <p>
     * The cryptoPropComboBox is initialized with the list of SymmetricCryptoProp instances obtained from the LocalConfigFactory class.
     * The data for the combo box is generated by converting the set of SymmetricCryptoProp objects to an array.
     * </p>
     *
     * <p>
     * The SymmetricCryptoProp class is a nested class of the LocalConfigFactory class.
     * It represents a cryptographic algorithm with properties such as key, initialization vector (IV), title, description, and sorting order.
     * This class is used to populate the combo box options.
     * </p>
     *
     * @see ComboBox
     * @see SymmetricCryptoProp
     * @see LocalConfigFactory
     * @see AESComponent
     */
    private final ComboBox<SymmetricCryptoProp> cryptoPropComboBox;
    /**
     * JButton for managing cryptographic operations.
     * <p>
     * This JButton is used in the AESComponent class for managing cryptographic operations.
     *
     * @see AESComponent
     */
    private final JButton cryptoManageBtn = new JButton(General.Ellipsis);
    /**
     * Represents a combo box for selecting the type of symmetric encryption algorithm.
     * <p>
     * This variable is an instance of the ComboBox class.
     * It is declared as 'private final', indicating that it cannot be modified or reassigned once initialized.
     * The generic type parameter is 'SymmetricCrypto', representing the type of items contained in the combo box.
     * <p>
     * The combo box is initialized with the crypto items,
     * which are options for selecting a symmetric encryption algorithm.
     * <p>
     * This combo box is used in the AESComponent class to allow the user to choose the encryption algorithm.
     *
     * @since <version>
     */
    private final ComboBox<SymmetricCrypto> cryptoComboBox = new ComboBox<>(this.cryptos);
    /**
     * The {@code encryptArea} variable is an instance of the {@code JBTextArea} class.
     * It is a private final field in the {@code AESComponent} class.
     * This field represents the text area where the encrypted data will be displayed.
     * <p>
     * The dimensions of the text area are set to 5 rows and 20 columns.
     * <p>
     * The initial value of the text area is empty.
     * <p>
     * This field is used along with other fields and methods in the {@code AESComponent} class to perform encryption operations.
     *
     * @see AESComponent
     * @see JBTextArea
     */
    private final LanguageTextArea encryptArea;

    /**
     * Button used to initiate the encryption process.
     */
    private final JButton encryptBtn = new JButton("Encrypt", IconC.DOUBLE_ARROW_DOWN);
    /**
     * Button used for decrypting data.
     * <p>
     * The decrypt button contains an icon and the text "Decrypt". When clicked,
     * it initiates the decryption process.
     * <p>
     * Note: The icon is loaded from a specific file path using the IconLoader class.
     * <p>
     * Example usage:
     * <p>
     * AESComponent component = new AESComponent();
     * JButton decryptBtn = component.getDecryptBtn();
     * decryptBtn.addActionListener(e -> {
     * // Perform decryption logic here
     * });
     */
    private final JButton decryptBtn = new JButton("Decrypt", IconC.DOUBLE_ARROW_UP);
    /**
     * TextArea used for displaying decrypted text.
     * <p>
     * This variable is declared as private and final,
     * meaning it cannot be accessed or modified outside the class where it is defined,
     * and its value cannot be changed once set
     * .
     * <p>
     * The textarea has an initial size of 5 rows and 20 columns.
     * <p>
     * Note: This variable is a field of the AESComponent class, and can be accessed within this class only.
     */
    private final LanguageTextArea decryptArea;

    /**
     * Initializes a new instance of the AESComponent class.
     * <p>
     * This constructor initializes the layout and action listeners for the AESComponent.
     * It calls the initLayout() and initAction() methods to set up the UI components and their actions.
     */
    public AESComponent(final Project project) {
        this.project = project;
        this.encryptArea = new LanguageTextArea(PlainTextLanguage.INSTANCE, project, "");
        this.decryptArea = new LanguageTextArea(PlainTextLanguage.INSTANCE, project, "");
        this.encryptArea.setPlaceholder("Encrypted text content");
        this.decryptArea.setPlaceholder("Decrypted text content");

        this.cryptoComboBox.setSelectedItem(SymmetricCrypto.AES_CBC_PKCS5);

        final List<SymmetricCryptoProp> props = ScratchFileUtils.read(new TypeReference<>() {
        });
        this.cryptoPropComboBox = new ComboBox<>(
                Optional.ofNullable(props)
                        .map(symmetricCryptoProps -> symmetricCryptoProps.stream()
                                .sorted(Comparator.comparing(SymmetricCryptoProp::getSorted))
                                .<SymmetricCryptoProp>mapMulti((prop, consumer) -> {
                                    consumer.accept(prop);
                                    prop.getChildren().stream()
                                            .sorted(Comparator.comparing(SymmetricCryptoProp::getSorted))
                                            .forEach(consumer);
                                })
                                .toArray(SymmetricCryptoProp[]::new))
                        .orElse(new SymmetricCryptoProp[0])
        );
        this.cryptoPropComboBox.setRenderer((list, value, index, isSelected, cellHasFocus) -> {
            if (Objects.isNull(value)) {
                return new JBLabel();
            }
            final Icon icon = value.isDirectory() ? Nodes.Folder : Nodes.NodePlaceholder;
            final String template = "%s - %s ( %s [ %s ] / %s [ %s ] )";
            final String text = template.formatted(
                    value.getTitle(), value.getDescription(),
                    StringUtils.maskSensitive(value.getKey()), value.keyType(),
                    StringUtils.maskSensitive(value.getIv()), value.ivType()
            );
            final JBLabel label = new JBLabel(text, icon, SwingConstants.LEFT);
            label.setEnabled(!value.isDirectory());
            return label;
        });

        this.initLayout();
        this.initAction();
    }

    /**
     * Initializes the layout of the AESComponent class.
     * <p>
     * This method sets up the GridBagLayout for the AESComponent and adds various components to it.
     */
    private void initLayout() {
        this.setLayout(new GridBagLayout());

        final JBPanel<JBPanelWithEmptyText> btnPanel = new JBPanel<>();
        btnPanel.setLayout(new BoxLayout(btnPanel, BoxLayout.LINE_AXIS));
        btnPanel.add(encryptBtn);
        btnPanel.add(decryptBtn);

        GridLayoutUtils.builder()
                .container(this).fill(GridBag.HORIZONTAL).weightX(1).add(this.cryptoPropComboBox)
                .newCell().weightX(0).add(this.cryptoManageBtn)
                .newCell().add(this.cryptoComboBox)
                .newRow().fill(GridBag.BOTH).weightY(1).gridWidth(3).add(this.decryptArea)
                .newRow().weightY(0).add(btnPanel)
                .newRow().weightY(1).gridWidth(3).add(this.encryptArea);
    }

    /**
     * Initializes the actions for the AESComponent class.
     * <p>
     * This method sets up the ActionListener for the encryption button and the decryption button.
     * When the encryption button is clicked, it retrieves the selected cryptography algorithm from the combo box,
     * retrieves the key and IV from the corresponding text fields, and encrypts the text from the decryption area using the selected algorithm.
     * The encrypted text is then set in the encryption area.
     * <p>
     * When the decryption button is clicked, it retrieves the selected cryptography algorithm from the combo box,
     * retrieves the key and IV from the corresponding text fields, and decrypts the text from the encryption area using the selected algorithm.
     * The decrypted text is then set in the decryption area.
     * <p>
     * If any exception occurs during encryption or decryption, an error message dialog is displayed.
     */
    private void initAction() {
        this.encryptBtn.addActionListener(e -> {
            try {
                final SymmetricCrypto crypto = this.cryptoComboBox.getItem();
                final SymmetricCryptoProp cryptoProp = this.cryptoPropComboBox.getItem();
                final String enc = crypto.crypto(cryptoProp.getKey(), cryptoProp.keyType(), cryptoProp.getIv(), cryptoProp.ivType()).enc(this.decryptArea.getText());
                this.encryptArea.setText(enc);
            } catch (Exception ex) {
                Messages.showMessageDialog(this.project, ex.getMessage(), "Encrypt Error", Messages.getErrorIcon());
            }
        });
        // 不使用自动格式化
        this.decryptArea.autoReformat(false);
        this.decryptBtn.addActionListener(e -> {
            try {
                final SymmetricCrypto crypto = this.cryptoComboBox.getItem();
                final SymmetricCryptoProp cryptoProp = this.cryptoPropComboBox.getItem();
                final String dec = crypto.crypto(cryptoProp.getKey(), cryptoProp.keyType(), cryptoProp.getIv(), cryptoProp.ivType()).dec(this.encryptArea.getText());
                this.decryptArea.setText(dec);
            } catch (Exception ex) {
                Messages.showMessageDialog(this.project, ex.getMessage(), "Decrypt Error", Messages.getErrorIcon());
            }
        });
        this.cryptoManageBtn.addActionListener(e -> {
            final SymmetricPropDialog dialog = new SymmetricPropDialog(this.project, this::refresh);
            dialog.showAndGet();
        });
    }

    void refresh(final List<SymmetricCryptoProp> props) {
        this.cryptoPropComboBox.removeAllItems();
        Optional.ofNullable(props).ifPresent(symmetricCryptoProps -> symmetricCryptoProps.stream()
                .sorted(Comparator.comparing(SymmetricCryptoProp::getSorted))
                .<SymmetricCryptoProp>mapMulti((prop, consumer) -> {
                    consumer.accept(prop);
                    prop.getChildren().stream()
                            .sorted(Comparator.comparing(SymmetricCryptoProp::getSorted))
                            .forEach(consumer);
                })
                .forEach(this.cryptoPropComboBox::addItem));
    }

}
